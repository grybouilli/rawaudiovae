{"Document":{"ObjectName":"Scenario::ScenarioDocumentModel","id":1,"BaseScenario":{"ObjectName":"Scenario::BaseScenario","id":0,"Constraint":{"ObjectName":"Scenario::IntervalModel","id":0,"Metadata":{"ScriptingName":"vae_synth","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Inlet":{"uuid":"a1574bb0-cbd4-4c7d-9417-0c25cfd1187b","ObjectName":"Inlet","id":0,"Hidden":false,"Custom":"Audio in","Exposed":"audio in"},"Outlet":{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":0,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true},"Processes":[{"uuid":"de035912-5b03-49a8-bc4d-b2cba68e21d9","ObjectName":"Scenario","id":1,"Metadata":{"ScriptingName":"Scenario.1","Comment":"","Color":"Transparent1","Label":"","Touched":false},"Duration":10584000000,"Height":1500.0,"StartOffset":0,"LoopDuration":10584000000,"Pos":[40.0,40.0],"Size":[200.0,100.0],"Loops":false,"Inlet":{"uuid":"a1574bb0-cbd4-4c7d-9417-0c25cfd1187b","ObjectName":"Inlet","id":0,"Hidden":false,"Custom":"In","Exposed":"in"},"Outlet":{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":0,"Hidden":false,"Custom":"Out","Exposed":"out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true},"StartTimeNodeId":0,"StartEventId":0,"StartStateId":0,"Exclusive":false,"TimeNodes":[{"ObjectName":"Scenario::TimeSyncModel","id":0,"Metadata":{"ScriptingName":"Sync.start","Comment":"","Color":"Gray","Label":"","Touched":true},"Date":0,"Events":[0],"MusicalSync":-1.0,"AutoTrigger":false,"Start":true,"Active":false,"Expression":" { true == false } "},{"ObjectName":"Scenario::TimeSyncModel","id":1,"Metadata":{"ScriptingName":"Sync.swum23","Comment":"","Color":"Gray","Label":"","Touched":true},"Date":1166513634,"Events":[1],"MusicalSync":-1.0,"AutoTrigger":false,"Start":false,"Active":false,"Expression":" { true == false } "},{"ObjectName":"Scenario::TimeSyncModel","id":2,"Metadata":{"ScriptingName":"Sync.uses9","Comment":"","Color":"Gray","Label":"","Touched":true},"Date":8222513634,"Events":[2],"MusicalSync":-1.0,"AutoTrigger":false,"Start":false,"Active":false,"Expression":" { true == false } "}],"Events":[{"ObjectName":"Scenario::EventModel","id":0,"Metadata":{"ScriptingName":"Event.start","Comment":"","Color":"Emphasis4","Label":"","Touched":true},"TimeNode":0,"States":[0],"Condition":"","Date":0,"Offset":0},{"ObjectName":"Scenario::EventModel","id":1,"Metadata":{"ScriptingName":"Event.batt92","Comment":"","Color":"Emphasis4","Label":"","Touched":true},"TimeNode":1,"States":[1],"Condition":"","Date":1166513634,"Offset":0},{"ObjectName":"Scenario::EventModel","id":2,"Metadata":{"ScriptingName":"Event.alas23","Comment":"","Color":"Emphasis4","Label":"","Touched":true},"TimeNode":2,"States":[2],"Condition":"","Date":8222513634,"Offset":0}],"States":[{"ObjectName":"Scenario::StateModel","id":0,"Metadata":{"ScriptingName":"State.start","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":0,"PreviousConstraint":null,"NextConstraint":1,"HeightPercentage":0.06333333333333334,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]},{"ObjectName":"Scenario::StateModel","id":1,"Metadata":{"ScriptingName":"State.plot19","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":1,"PreviousConstraint":1,"NextConstraint":2,"HeightPercentage":0.06333333333333334,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]},{"ObjectName":"Scenario::StateModel","id":2,"Metadata":{"ScriptingName":"State.garb28","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":2,"PreviousConstraint":2,"NextConstraint":null,"HeightPercentage":0.06333333333333334,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]}],"Constraints":[{"ObjectName":"Scenario::IntervalModel","id":1,"Metadata":{"ScriptingName":"Interval.sorb15","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Inlet":{"uuid":"a1574bb0-cbd4-4c7d-9417-0c25cfd1187b","ObjectName":"Inlet","id":0,"Hidden":false,"Custom":"Audio in","Exposed":"audio in"},"Outlet":{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":0,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true},"Processes":[],"SmallViewRack":[],"FullViewRack":[],"DefaultDuration":1166513634,"MinDuration":1166513634,"MaxDuration":1166513634,"GuiDuration":1283164997,"Speed":1.0,"Rigidity":true,"MinNull":false,"MaxInf":false,"Signatures":[],"StartState":0,"EndState":1,"StartDate":0,"HeightPercentage":0.06333333333333334,"NodalSlotHeight":100.0,"QuantizationRate":-1.0,"Zoom":-1.0,"Center":0,"ViewMode":0,"SmallViewShown":false,"HasSignature":false},{"ObjectName":"Scenario::IntervalModel","id":2,"Metadata":{"ScriptingName":"VAE Synth","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Inlet":{"uuid":"a1574bb0-cbd4-4c7d-9417-0c25cfd1187b","ObjectName":"Inlet","id":0,"Hidden":false,"Custom":"Audio in","Exposed":"audio in"},"Outlet":{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":0,"Hidden":false,"Custom":"Audio out","Exposed":"audio out","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true},"Processes":[{"uuid":"14f96468-b70c-4280-8179-460cbc1c1406","ObjectName":"VAE_synth","id":1,"Metadata":{"ScriptingName":"VAE Synth","Comment":"","Color":"Transparent1","Label":"","Touched":true},"Duration":7056000000,"Height":300.0,"StartOffset":0,"LoopDuration":7056000000,"Pos":[40.0,40.0],"Size":[107.984375,22.0],"Loops":false,"Inlets":[{"uuid":"9ae797ea-d94c-4792-acec-9ec1932bae5d","ObjectName":"Inlet","id":0,"Hidden":true,"Custom":"Workspace folder","Exposed":"workspace folder","Value":{"String":"/home/grybouilli/projets/internship2023/rawaudiovae"},"Domain":{}},{"uuid":"feb87e84-e0d2-428f-96ff-a123ac964f59","ObjectName":"Inlet","id":1,"Hidden":true,"Custom":"Enter folder","Exposed":"enter folder","Value":{"Bool":false},"Domain":{"Bool":null}},{"uuid":"de15c0da-429b-49d3-bb07-7c41f5f205c8","ObjectName":"Inlet","id":2,"Hidden":true,"Custom":"Program","Exposed":"program","Value":{"String":"import torch                                                       \nimport torchaudio\nfrom torch.utils.data import Dataset, TensorDataset, DataLoader\nfrom torch.nn import functional as F\nfrom torch import nn, optim\nResample = torchaudio.transforms.Resample(44100, 48000, resampling_method='kaiser_window')\ndevice = 'cuda:0'\nResample = Resample.to(device)\n\nfrom pathlib import Path\nimport random\nimport numpy as np\nfrom scipy import interpolate as sp_interpolate\nimport librosa\n\n\nsampling_rate = 44100\nsr = sampling_rate\n\nhop_length = 128\n\nsegment_length = 1024\nn_units = 2048\nlatent_dim = 256\ndevice = 'cuda:0'\n\nbatch_size = 256\n\naudio_fold = Path(r'./content/2022-zkm-workshop/ltsp/erokia/audio')\naudio = audio_fold\nlts_audio_files = [f for f in audio_fold.glob('*.wav')]\n\n# Models \n\nclass raw_VAE(nn.Module):\n  def __init__(self, segment_length, n_units, latent_dim):\n    super(raw_VAE, self).__init__()\n\n    self.segment_length = segment_length\n    self.n_units = n_units\n    self.latent_dim = latent_dim\n    \n    self.fc1 = nn.Linear(segment_length, n_units)\n    self.fc21 = nn.Linear(n_units, latent_dim)\n    self.fc22 = nn.Linear(n_units, latent_dim)\n    self.fc3 = nn.Linear(latent_dim, n_units)\n    self.fc4 = nn.Linear(n_units, segment_length)\n\n  def encode(self, x):\n      h1 = F.relu(self.fc1(x))\n      return self.fc21(h1), self.fc22(h1)\n\n  def reparameterize(self, mu, logvar):\n      std = torch.exp(0.5*logvar)\n      eps = torch.randn_like(std)\n      return mu + eps*std\n\n  def decode(self, z):\n      h3 = F.relu(self.fc3(z))\n      return F.tanh(self.fc4(h3))\n\n  def forward(self, x):\n      mu, logvar = self.encode(x.view(-1, self.segment_length))\n      z = self.reparameterize(mu, logvar)\n      return self.decode(z), mu, logvar\n\n# Reconstruction + KL divergence losses summed over all elements and batch\ndef loss_function(recon_x, x, mu, logvar, kl_beta, segment_length):\n  recon_loss = F.mse_loss(recon_x, x.view(-1, segment_length))\n\n  # see Appendix B from VAE paper:\n  # Kingma and Welling. Auto-Encoding Variational Bayes. ICLR, 2014\n  # https://arxiv.org/abs/1312.6114\n  # 0.5 * sum(1 + log(sigma^2) - mu^2 - sigma^2)\n  KLD = -0.5 * torch.mean(1 + logvar - mu.pow(2) - logvar.exp())\n\n  return recon_loss + ( kl_beta * KLD)\n  \n# Datasets \n\nclass AudioDataset(torch.utils.data.Dataset):\n    \"\"\"\n    This is the main class that calculates the spectrogram and returns the\n    spectrogram, audio pair.\n    \"\"\"\n\n    def __init__(self, audio_np, segment_length, sampling_rate, hop_size, transform=None):\n        \n        self.transform = transform\n        self.sampling_rate = sampling_rate\n        self.segment_length = segment_length\n        self.hop_size = hop_size\n        \n        if segment_length % hop_size != 0:\n            raise ValueError(\"segment_length {} is not a multiple of hop_size {}\".format(segment_length, hop_size))\n\n        if len(audio_np) % hop_size != 0:\n            num_zeros = hop_size - (len(audio_np) % hop_size)\n            audio_np = np.pad(audio_np, (0, num_zeros), 'constant', constant_values=(0,0))\n\n        self.audio_np = audio_np\n        \n    def __getitem__(self, index):\n        \n        # Take segment\n        seg_start = index * self.hop_size\n        seg_end = (index * self.hop_size) + self.segment_length\n        sample = self.audio_np[ seg_start : seg_end ]\n        \n        if self.transform:\n            sample = self.transform(sample)\n\n        return sample\n\n    def __len__(self):\n        return (len(self.audio_np) // self.hop_size) - (self.segment_length // self.hop_size) + 1\n\nclass ToTensor(object):\n    \"\"\"Convert ndarrays in sample to Tensors.\"\"\"\n\n    def __call__(self, sample):\n        return torch.from_numpy(sample)\n\nclass TestDataset(torch.utils.data.Dataset):\n    \"\"\"\n    This is the main class that calculates the spectrogram and returns the\n    spectrogram, audio pair.\n    \"\"\"\n\n    def __init__(self, audio_np, segment_length, sampling_rate, transform=None):\n        \n        self.transform = transform\n        self.sampling_rate = sampling_rate\n        self.segment_length = segment_length\n        \n        if len(audio_np) % segment_length != 0:\n            num_zeros = segment_length - (len(audio_np) % segment_length)\n            audio_np = np.pad(audio_np, (0, num_zeros), 'constant', constant_values=(0,0))\n\n        self.audio_np = audio_np\n        \n    def __getitem__(self, index):\n        \n        # Take segment\n        seg_start = index * self.segment_length\n        seg_end = (index * self.segment_length) + self.segment_length\n        sample = self.audio_np[ seg_start : seg_end ]\n        \n        if self.transform:\n            sample = self.transform(sample)\n\n        return sample\n\n    def __len__(self):\n        return len(self.audio_np) // self.segment_length\n\nstate = torch.load(Path(r'./content/2022-zkm-workshop/nospectral/erokia/spectralvae/run-000/checkpoints/ckpt_00500'))\nmodel = raw_VAE(segment_length, n_units, latent_dim).to(device)\nmodel.load_state_dict(state['state_dict'])\n# model = None # torch.load your model  \nif model != None:\n    print(model)\n    model.eval()\n\ntest_audio_1_path = lts_audio_files[random.randint(0, len(lts_audio_files) - 1)]\ntest_audio_1, fs = librosa.load(test_audio_1_path, sr=None)\ntest_audio_2_path = lts_audio_files[random.randint(0, len(lts_audio_files)- 1)]\ntest_audio_2, fs = librosa.load(test_audio_2_path, sr=None)\n\nif test_audio_1.shape[0] < test_audio_2.shape[0]:\n    while test_audio_1.shape[0] < test_audio_2.shape[0]:\n        test_audio_1 = np.concatenate((test_audio_1, test_audio_1), 0)\n    test_audio_1 = test_audio_1[:test_audio_2.shape[0]] \n\nelse:\n    while test_audio_2.shape[0] < test_audio_1.shape[0]:\n        test_audio_2 = np.concatenate((test_audio_2, test_audio_2), 0)\n    test_audio_2 = test_audio_2[:test_audio_1.shape[0]]\n\n# Create the dataset\ntest_dataset1 = TestDataset(test_audio_1, segment_length = segment_length, sampling_rate = sampling_rate, transform=ToTensor())\ntest_dataset2 = TestDataset(test_audio_2, segment_length = segment_length, sampling_rate = sampling_rate, transform=ToTensor())\n\ntest_dataloader1 = DataLoader(test_dataset1, batch_size = batch_size, shuffle=False)\ntest_dataloader2 = DataLoader(test_dataset2, batch_size = batch_size, shuffle=False)"},"Domain":{}},{"uuid":"de15c0da-429b-49d3-bb07-7c41f5f205c8","ObjectName":"Inlet","id":3,"Hidden":true,"Custom":"Program","Exposed":"program","Value":{"String":"def raw_to_z_dist(test_dataloader, raw_model, device):\n    init_test = True\n    for iterno, test_sample in enumerate(test_dataloader):\n        with torch.no_grad():\n            test_sample = test_sample.to(device)\n            test_mu, test_logvar = raw_model.encode(test_sample)\n\n        if init_test:\n            test_z_mu = test_mu \n            test_z_logvar = test_logvar\n            init_test = False\n\n        else:\n            test_z_mu = torch.cat((test_z_mu, test_mu ),0)\n            test_z_logvar = torch.cat((test_z_logvar, test_logvar ),0)\n    return test_z_mu, test_z_logvar\n\ntest1_z_mu, test1_z_logvar = raw_to_z_dist(test_dataloader1, model, device)\ntest2_z_mu, test2_z_logvar = raw_to_z_dist(test_dataloader2, model, device)\n\ndef raw_interpolate_stepwise_z_dist(test1_z_mu, test1_z_logvar, test2_z_mu, test2_z_logvar, interpolation_range, raw_model):\n\n    init_test = True\n    for interpolation in interpolation_range:\n\n        inter_z_mu = torch.add( torch.mul(test1_z_mu, (1-interpolation)), torch.mul(test2_z_mu, interpolation) )\n        inter_z_logvar = torch.add( torch.mul(test1_z_logvar, (1-interpolation)), torch.mul(test2_z_logvar, interpolation) )\n        \n        with torch.no_grad():\n            test_pred_z = raw_model.reparameterize(inter_z_mu, inter_z_logvar)\n            test_pred = raw_model.decode(test_pred_z)\n\n        if init_test:\n            test_predictions = test_pred\n            init_test = False\n\n        else:\n            test_predictions = torch.cat((test_predictions, test_pred ),0)\n        \n    return test_predictions\n\ninterpolation_range = np.arange(0, 1.1, 0.2)\n\ninter_raw_all = raw_interpolate_stepwise_z_dist(test1_z_mu, test1_z_logvar, test2_z_mu, test2_z_logvar, interpolation_range, model)\n\noutput = inter_raw_all.view(-1).cpu().numpy()\n\n"},"Domain":{}}],"Outlets":[{"uuid":"a1d97535-18ac-444a-8417-0cbc1692d897","ObjectName":"Outlet","id":0,"Hidden":false,"Custom":"Output","Exposed":"output","GainInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10000,"Hidden":false,"Custom":"Gain","Exposed":"gain","Value":{},"Domain":{"Float":{"Min":0.0,"Max":1.0}}},"PanInlet":{"uuid":"9a13fb32-269a-47bf-99a9-930188c1f19c","ObjectName":"Inlet","id":10001,"Hidden":false,"Custom":"Pan","Exposed":"pan","Value":{},"Domain":{}},"Gain":1.0,"Pan":[1.0,1.0],"Propagate":true}]}],"SmallViewRack":[{"Processes":[1],"Process":null,"Height":436.0,"Nodal":true}],"FullViewRack":[{"Process":0,"Nodal":true}],"DefaultDuration":7056000000,"MinDuration":7056000000,"MaxDuration":7056000000,"GuiDuration":7761600000,"Speed":1.0,"Rigidity":true,"MinNull":false,"MaxInf":false,"Signatures":[],"StartState":1,"EndState":2,"StartDate":1166513634,"HeightPercentage":0.06333333333333334,"NodalSlotHeight":100.0,"QuantizationRate":-1.0,"Zoom":-1.0,"Center":0,"ViewMode":0,"SmallViewShown":true,"HasSignature":false}],"Comments":[]}],"SmallViewRack":[],"FullViewRack":[{"Process":1,"Nodal":false}],"DefaultDuration":10584000000,"MinDuration":10584000000,"MaxDuration":11113200000,"GuiDuration":11642400000,"Speed":1.0,"Rigidity":false,"MinNull":false,"MaxInf":true,"Signatures":[[0,[4,4]]],"StartState":0,"EndState":1,"StartDate":0,"HeightPercentage":0.0,"NodalSlotHeight":100.0,"QuantizationRate":-1.0,"Zoom":15120000.0,"Center":0,"ViewMode":0,"SmallViewShown":false,"HasSignature":true},"StartTimeNode":{"ObjectName":"Scenario::TimeSyncModel","id":0,"Metadata":{"ScriptingName":"Sync.start","Comment":"","Color":"Gray","Label":"","Touched":true},"Date":0,"Events":[0],"MusicalSync":-1.0,"AutoTrigger":false,"Start":true,"Active":false,"Expression":" { true == false } "},"EndTimeNode":{"ObjectName":"Scenario::TimeSyncModel","id":1,"Metadata":{"ScriptingName":"Sync.end","Comment":"","Color":"Gray","Label":"","Touched":true},"Date":10584000000,"Events":[1],"MusicalSync":-1.0,"AutoTrigger":false,"Start":false,"Active":true,"Expression":" { true == false } "},"StartEvent":{"ObjectName":"Scenario::EventModel","id":0,"Metadata":{"ScriptingName":"Event.start","Comment":"","Color":"Emphasis4","Label":"","Touched":true},"TimeNode":0,"States":[0],"Condition":"","Date":0,"Offset":0},"EndEvent":{"ObjectName":"Scenario::EventModel","id":1,"Metadata":{"ScriptingName":"Event.end","Comment":"","Color":"Emphasis4","Label":"","Touched":true},"TimeNode":1,"States":[1],"Condition":"","Date":10584000000,"Offset":0},"StartState":{"ObjectName":"Scenario::StateModel","id":0,"Metadata":{"ScriptingName":"State.start","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":0,"PreviousConstraint":null,"NextConstraint":0,"HeightPercentage":0.0,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]},"EndState":{"ObjectName":"Scenario::StateModel","id":1,"Metadata":{"ScriptingName":"State.end","Comment":"","Color":"Base1","Label":"","Touched":true},"Event":1,"PreviousConstraint":0,"NextConstraint":null,"HeightPercentage":0.0,"Messages":{"Name":"","Accessors":[],"Unit":"none","Previous":[],"Following":[],"User":null,"Priorities":[1,2,0]},"Controls":[],"StateProcesses":[]}},"Speed":1.0,"Cables":[],"BusIntervals":[]},"Plugins":[{"uuid":"1f923578-08c3-49be-9ba9-69c144ee2e32","Refresh":false,"Reconnect":false,"MidiRatio":1.0},{"uuid":"6e610e1f-9de2-4c36-90dd-0ef570002a21","RootNode":{},"Children":[]}],"Version":4,"Commit":"d772f9d93c5b1e6cbd5f9c143687a267fb0a98e2","Tag":"3.1.11"}